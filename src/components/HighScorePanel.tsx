/**
 * üèÜ „Éè„Ç§„Çπ„Ç≥„Ç¢„Éë„Éç„É´ - UI „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 *
 * t-wadaÊµÅË®≠Ë®àÊÄùÊÉ≥:
 * - „ÉÜ„Çπ„Çø„Éñ„É´„Å™„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàË®≠Ë®à
 * - Â§ñÈÉ®‰æùÂ≠ò„ÅÆÂàÜÈõ¢
 * - ÊòéÁ¢∫„Å™Ë≤¨‰ªªÂàÜÈõ¢
 * - „É¶„Éº„Ç∂„Éº‰ΩìÈ®ìÈáçË¶ñ
 */

import React, { useState, useEffect } from 'react';
import { HighScoreEntry } from '@/types/highscore';
import { getHighScores, saveHighScore } from '@/utils/highscore';

interface HighScorePanelProps {
  /** ÁèæÂú®„ÅÆ„Çπ„Ç≥„Ç¢ */
  currentScore: number;
  /** ÁèæÂú®„ÅÆ„É¨„Éô„É´ */
  currentLevel: number;
  /** ÁèæÂú®„ÅÆÊ∂àÂéª„É©„Ç§„É≥Êï∞ */
  currentLines: number;
  /** „Ç≤„Éº„É†„Ç™„Éº„Éê„ÉºÁä∂ÊÖã */
  gameOver: boolean;
  /** Ë°®Á§∫Áä∂ÊÖã */
  isVisible: boolean;
  /** Èñâ„Åò„Çã„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ */
  onClose: () => void;
}

/**
 * ÁèæÂú®„ÅÆÊó•‰ªò„ÇíÂèñÂæóÔºàYYYY-MM-DDÂΩ¢ÂºèÔºâ
 */
const getCurrentDate = (): string => {
  const datePart = new Date().toISOString().split('T')[0];
  if (!datePart) {
    throw new Error('Invalid date format');
  }
  return datePart;
};

/**
 * „Éè„Ç§„Çπ„Ç≥„Ç¢„Éë„Éç„É´„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 */
export const HighScorePanel: React.FC<HighScorePanelProps> = ({
  currentScore,
  currentLevel,
  currentLines,
  gameOver,
  isVisible,
  onClose,
}) => {
  const [playerName, setPlayerName] = useState('');
  const [highScores, setHighScores] = useState<HighScoreEntry[]>([]);
  const [isNewHighScore, setIsNewHighScore] = useState(false);

  // „Éè„Ç§„Çπ„Ç≥„Ç¢„ÅÆË™≠„ÅøËæº„Åø
  useEffect(() => {
    const scores = getHighScores();
    setHighScores(scores);

    // Êñ∞„Åó„ÅÑ„Éè„Ç§„Çπ„Ç≥„Ç¢„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if (gameOver && currentScore > 0) {
      const lastScore = scores[scores.length - 1];
      const isNewRecord =
        scores.length < 10 || (lastScore && currentScore > lastScore.score);
      setIsNewHighScore(Boolean(isNewRecord));
    }
  }, [gameOver, currentScore]);

  // „Éó„É¨„Ç§„É§„ÉºÂêç„ÅÆ‰øùÂ≠ò
  const handleSaveHighScore = () => {
    if (playerName.trim()) {
      const newEntry: HighScoreEntry = {
        score: currentScore,
        playerName: playerName.trim(),
        date: getCurrentDate(),
        level: currentLevel,
        lines: currentLines,
      };

      saveHighScore(newEntry);
      setHighScores(getHighScores());
      setIsNewHighScore(false);
      setPlayerName('');
    }
  };

  // „Ç≠„Éº„Éú„Éº„Éâ„Ç§„Éô„É≥„Éà
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSaveHighScore();
    }
  };

  if (!isVisible) return null;

  return (
    <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>
      <div className='bg-white rounded-lg p-6 max-w-md w-full mx-4'>
        <div className='flex justify-between items-center mb-4'>
          <h2 className='text-xl font-bold'>üèÜ „Éè„Ç§„Çπ„Ç≥„Ç¢</h2>
          <button
            onClick={onClose}
            className='text-gray-500 hover:text-gray-700'
            aria-label='Èñâ„Åò„Çã'
          >
            ‚úï
          </button>
        </div>

        {/* Êñ∞„Åó„ÅÑ„Éè„Ç§„Çπ„Ç≥„Ç¢„ÅÆÂ†¥Âêà„ÅÆÂÖ•Âäõ„Éï„Ç©„Éº„É† */}
        {isNewHighScore && (
          <div className='mb-4 p-4 bg-yellow-50 border border-yellow-200 rounded'>
            <p className='text-sm text-yellow-800 mb-2'>
              üéâ Êñ∞„Åó„ÅÑ„Éè„Ç§„Çπ„Ç≥„Ç¢„Åß„ÅôÔºÅ
            </p>
            <p className='text-lg font-bold text-yellow-900 mb-2'>
              {currentScore.toLocaleString()}ÁÇπ
            </p>
            <input
              type='text'
              value={playerName}
              onChange={e => setPlayerName(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder='„Éó„É¨„Ç§„É§„ÉºÂêç„ÇíÂÖ•Âäõ'
              className='w-full p-2 border border-gray-300 rounded mb-2'
              maxLength={20}
              autoFocus
            />
            <button
              onClick={handleSaveHighScore}
              disabled={!playerName.trim()}
              className='w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600 disabled:bg-gray-300'
            >
              ‰øùÂ≠ò
            </button>
          </div>
        )}

        {/* „Éè„Ç§„Çπ„Ç≥„Ç¢„É™„Çπ„Éà */}
        <div className='max-h-60 overflow-y-auto'>
          {highScores.length === 0 ? (
            <p className='text-center text-gray-500 py-4'>
              „Åæ„Å†„Éè„Ç§„Çπ„Ç≥„Ç¢„Åå„ÅÇ„Çä„Åæ„Åõ„Çì
            </p>
          ) : (
            <div className='space-y-2'>
              {highScores.map((score, index) => (
                <div
                  key={`${score.playerName}-${score.date}-${index}`}
                  className='flex items-center justify-between p-2 bg-gray-50 rounded'
                >
                  <div className='flex items-center space-x-2'>
                    <span className='text-sm font-bold text-gray-600'>
                      {index + 1}
                    </span>
                    <span className='font-medium'>{score.playerName}</span>
                  </div>
                  <div className='text-right'>
                    <div className='font-bold'>
                      {score.score.toLocaleString()}
                    </div>
                    <div className='text-xs text-gray-500'>
                      Lv.{score.level} ({score.lines}„É©„Ç§„É≥)
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
